from collections import deque

# Simulate a dictionary of valid words (can be replaced with an actual dictionary file or API)
def is_valid_word(word):
    # Here, we're using a simple list of words. In practice, this could come from a large dictionary file.
    valid_words = {"hot", "dot", "dog", "lot", "log", "cog", "hit", "lit", "pit", "bat", "cat"}
    return word in valid_words

def word_ladder(begin_word, end_word):
    # Base case check
    if begin_word == end_word:
        return 0, [begin_word]

    # Initialize BFS
    queue = deque([(begin_word, 1, [begin_word])])  # (word, level, path)
    visited = set([begin_word])  # Keep track of visited words to avoid cycles

    while queue:
        current_word, level, path = queue.popleft()

        # Try all possible words by changing one letter at a time
        for i in range(len(current_word)):
            for c in 'abcdefghijklmnopqrstuvwxyz':
                if c != current_word[i]:  # Skip if the letter is the same
                    new_word = current_word[:i] + c + current_word[i+1:]

                    if new_word == end_word:
                        return level + 1, path + [new_word]  # Return the path with the new word

                    if is_valid_word(new_word) and new_word not in visited:
                        visited.add(new_word)  # Mark this word as visited
                        queue.append((new_word, level + 1, path + [new_word]))

    return 0, []  # Return 0 if no transformation is possible

# User inputs
begin_word = input("Enter the begin word: ").strip()
end_word = input("Enter the end word: ").strip()

# Call the function
length, transformation_path = word_ladder(begin_word, end_word)

if length > 0:
    print("Shortest transformation length:", length)
    print("Transformation path:", " -> ".join(transformation_path))
else:
    print("No transformation path found.")


